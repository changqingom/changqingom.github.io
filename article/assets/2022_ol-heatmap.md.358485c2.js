import{o as n,c as a,a as s}from"./app.653a9468.js";const t='{"title":"Openlayers@6.x热力图绘制分析","description":"","frontmatter":{},"relativePath":"2022/ol-heatmap.md","lastUpdated":1649568008354}',o={},p=s('<h1 id="openlayers-6-x热力图绘制分析"><a class="header-anchor" href="#openlayers-6-x热力图绘制分析" aria-hidden="true">#</a> Openlayers@6.x热力图绘制分析</h1><p>问题: ol热力图是否可以根据像素点颜色计算出对应的权重值</p><blockquote><p>code from ol@6.5.0</p></blockquote><p>heatmap.js 渲染器部分核心逻辑</p><div class="language-javascript"><pre><code><span class="token keyword">new</span> <span class="token class-name">WebGLPointsLayerRenderer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  attributes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;weight&#39;</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">feature</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> weight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">weightFunction_</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> weight <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">clamp</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  vertexShader<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          // 将四个顶点 向不同方向偏移  得到两个三角面\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_weight = a_weight;\n        }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  fragmentShader<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          // 根据距离中心点长度设置不同的颜色\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  hitVertexShader<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  hitFragmentShader<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          if (alpha &lt; 0.05) {\n            discard;\n          }\n\n          gl_FragColor = v_hitColor;\n        }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  uniforms<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">u_size</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Property<span class="token punctuation">.</span><span class="token constant">RADIUS</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Property<span class="token punctuation">.</span><span class="token constant">BLUR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">u_blurSlope</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Property<span class="token punctuation">.</span><span class="token constant">RADIUS</span><span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Property<span class="token punctuation">.</span><span class="token constant">BLUR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  postProcesses<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      fragmentShader<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      uniforms<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">u_gradientTexture</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gradient_<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>WebGLPointsLayerRenderer 渲染器参数描述:</p><p>attributes: 顶点属性变量</p><ul><li>weight 各点的权重值 ol 热力图从传入的要素对象属性中获取<code>weight</code>值,并将该值 clamp To 0~1 之间如果该值不存在将<code>weight</code>置为 1</li></ul><p>uniforms: 绘制全局变量</p><ul><li><p>u_size: 一个热力点绘制圆直径</p></li><li><p>u_blurSlope: 设置的半径和模糊半径的比例</p></li></ul><p><code>vertexShader</code> <code>fragmentShader</code> 分别为热力图 顶点着色器和片段着色器 用于热力图点位绘制 <code>hitVertexShader</code> <code>hitFragmentShader</code> 分别为热力图 碰撞检测顶点着色器和片段着色器 用于鼠标事件的触发</p><p>postProcesses: 全局后处理</p><hr><p>ol webgl 点渲染器 渲染一个点时会使用四个顶点进行绘制,按照传入的顺序 给每个顶点设置相同的<code>a_position</code>和不同的<code>a_index</code></p><p>按照内部定义的位置 这四个顶点需要进行不同方向的平移,形成两个三角面,如下:</p><div class="language-"><pre><code>(u0, v1)      (u1, v1)\n [3]----------[2]\n  |`           |\n  |  `         |\n  |    `       |\n  |      `     |\n  |        `   |\n  |          ` |\n [0]----------[1]\n(u0, v0)      (u1, v0)\n</code></pre></div><p>按照上方定义四个顶点的uv坐标</p><p>单个点颜色 vec4(alpha, alpha, alpha, alpha)</p><p>alpha的计算公式:</p><div class="language-"><pre><code>(1.0 - sqrt(texCoord.x * texCoord.x + texCoord.y * texCoord.y)) * (RADIUS/BLUR) * weight\n</code></pre></div><p>ol使用 <code>gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)</code> 混合 公式 <code>color(RGBA) = (sourceColor * 1.0) + (destinationColor * 1.0-sourceColor.a)</code> sourceColor 为后绘制的颜色 destinationColor为前一个绘制的颜色</p><p>后处理阶段: 将绘制好的热力点灰度图使用均匀分布的色带填充</p><hr><p>结论: 一个位置颜色所对应的值 受该像素距离自身所属圆心距离和该像素混合次数有关无法通过颜色计算出权重值;</p>',24);o.render=function(s,t,o,e,c,i){return n(),a("div",null,[p])};export default o;export{t as __pageData};
