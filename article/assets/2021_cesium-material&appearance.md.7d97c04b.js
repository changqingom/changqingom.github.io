import{o as a,c as n,a as e}from"./app.653a9468.js";const s='{"title":"Cesium Material and Appearance","description":"","frontmatter":{},"headers":[{"level":2,"title":"Cesium Material","slug":"cesium-material"},{"level":3,"title":"材料注册与使用","slug":"材料注册与使用"},{"level":2,"title":"Cesium MaterialProperty","slug":"cesium-materialproperty"},{"level":2,"title":"Cesium Appearance","slug":"cesium-appearance"}],"relativePath":"2021/cesium-material&appearance.md","lastUpdated":1638174346375}',t={},p=e('<h1 id="cesium-material-and-appearance"><a class="header-anchor" href="#cesium-material-and-appearance" aria-hidden="true">#</a> Cesium Material and Appearance</h1><h2 id="cesium-material"><a class="header-anchor" href="#cesium-material" aria-hidden="true">#</a> Cesium Material</h2><blockquote><p>A Material defines surface appearance through a combination of diffuse, specular, normal, emission, and alpha components. These values are specified using a JSON schema called Fabric which gets parsed and assembled into glsl shader code behind-the-scenes. Check out the <a href="https://github.com/CesiumGS/cesium/wiki/Fabric" target="_blank" rel="noopener noreferrer">wiki page</a> for more details on Fabric.</p></blockquote><p>材料组合了颜色光照透明度等并传入着色器中参与渲染流程</p><h3 id="材料注册与使用"><a class="header-anchor" href="#材料注册与使用" aria-hidden="true">#</a> 材料注册与使用</h3><p><code>Cesium</code>默认全局注册了一些常用材料,后续扩展自定义的材料可使用如下方式:</p><p><code>fabric</code>对象中 <code>components</code> 与 <code>source</code> 可二选一进行材料内容的设置</p><p><a href="https://github.com/CesiumGS/cesium/wiki/Fabric#components" target="_blank" rel="noopener noreferrer">Fabric Components 描述</a></p><p><a href="https://github.com/CesiumGS/cesium/wiki/Fabric#source" target="_blank" rel="noopener noreferrer">Fabric Source 描述</a></p><div class="language-javascript"><pre><code><span class="token comment">// 全局注册初始化</span>\nMaterial<span class="token punctuation">.</span>ExampleType <span class="token operator">=</span> <span class="token string">&quot;exampleType&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fabric <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> Material<span class="token punctuation">.</span>ExampleType<span class="token punctuation">,</span>\n  uniforms<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ....</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  source<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 仅注册</span>\nMaterial<span class="token punctuation">.</span>_materialCache<span class="token punctuation">.</span><span class="token function">addMaterial</span><span class="token punctuation">(</span>Material<span class="token punctuation">.</span>ExampleType<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  fabric<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 同时注册与创建</span>\n<span class="token keyword">new</span> <span class="token class-name">Cesium<span class="token punctuation">.</span>Material</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  fabric<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建</span>\nCesium<span class="token punctuation">.</span>Material<span class="token punctuation">.</span><span class="token function">fromType</span><span class="token punctuation">(</span>Material<span class="token punctuation">.</span>ExampleType<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 设置 uniforms</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><hr><h2 id="cesium-materialproperty"><a class="header-anchor" href="#cesium-materialproperty" aria-hidden="true">#</a> Cesium MaterialProperty</h2><blockquote><p>The interface for all Property objects that represent Material uniforms. This type defines an interface and cannot be instantiated directly.</p></blockquote><p>用于设置<code>Entity</code>对象材料属性的接口</p><p>可实现该接口用于材料的动画效果</p><p><strong>接口签名</strong></p><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MaterialProperty</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Gets a value indicating if this property is constant.  A property is considered\n    constant if getValue always returns the same result for the current definition.\n     * 标志getValue方法是否返回值永远相同\n     */</span>\n    <span class="token keyword">readonly</span> isConstant<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Gets the event that is raised whenever the definition of this property changes.\n    The definition is considered to have changed if a call to getValue would return\n    a different result for the same time.\n     * 材料属性定义的属性发生变更时触发该事件\n     */</span>\n    <span class="token keyword">readonly</span> definitionChanged<span class="token operator">:</span> Event<span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Gets the {@link Material} type at the provided time.\n     * 获取材料类型\n     * @param time - The time for which to retrieve the type.\n     * @returns The type of material.\n     */</span>\n    <span class="token function">getType</span><span class="token punctuation">(</span>time<span class="token operator">:</span> JulianDate<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Gets the value of the property at the provided time.\n     * 获取传入时间的属性值\n     * @param time - The time for which to retrieve the value.\n     * @param [result] - The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns The modified result parameter or a new instance if the result parameter was not supplied.\n     */</span>\n    <span class="token function">getValue</span><span class="token punctuation">(</span>time<span class="token operator">:</span> JulianDate<span class="token punctuation">,</span> result<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Compares this property to the provided property and returns\n    &lt;code&gt;true&lt;/code&gt; if they are equal, &lt;code&gt;false&lt;/code&gt; otherwise.\n     * 判断两个属性是否相同\n     * @param [other] - The other property.\n     * @returns &lt;code&gt;true&lt;/code&gt; if left and right are equal, &lt;code&gt;false&lt;/code&gt; otherwise.\n     */</span>\n    <span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token operator">?</span><span class="token operator">:</span> Property<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><hr><h2 id="cesium-appearance"><a class="header-anchor" href="#cesium-appearance" aria-hidden="true">#</a> Cesium Appearance</h2><blockquote><p>An appearance defines the full GLSL vertex and fragment shaders and the render state used to draw a Primitive. All appearances implement this base Appearance interface.</p></blockquote><p>抽象接口,用以定义绘制<code>Primitive</code>时用到的顶点,片段着色器和渲染状态.</p><p><code>Cesium.MaterialAppearance</code>实现了该接口</p>',22);t.render=function(e,s,t,o,c,r){return a(),n("div",null,[p])};export default t;export{s as __pageData};
